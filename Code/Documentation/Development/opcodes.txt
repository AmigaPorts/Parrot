Virtual Machine Opcodes
# Opcodes

Each opcode is 2-bytes.

First 6 bits are the opcode, remaining bits is the argument (10-bits)

Constants may be stored in the argument, or in the ULONG constants
table, which is per script.

_Id_      _Name_      _Argument_                    _Operation_
00      stop                                  Stop Script
01      rem       user                        Remark
02      pushs     value.s                     Push signed value
03      pushu     value.u                     Push unsigned value
04      pushcs    value.s                     Push signed constant
05      pushcu    value.u                     Push unsigned constant
06      dup                                   Duplicate top of stack
07      dis                                   Discard top of stack
08      load      index.u                     Push from self field
09      save      index.u                     Pop to self field
0A      gload     index.u                     Push to global field
0B      gsave     index.u                     Pop to global field
0C      cmp                                   Compare s[0] and s[-1]
0D      cmpc      value.s                     Compare s[0] and value
0E      j         address.s                   pc=addr always
0F      je        address.s                   pc=addr if equal
10      jne       address.s                   pc=addr if not equal
11      jg        address.s                   pc=addr if greater
12      jge       address.s                   pc=addr if greater/equal
13      jl        address.s                   pc=addr if less
14      jle       address.s                   pc=addr if less/equal
15      add                                   pop s[0],s[-1] s[0]=a+b
16      addq      value.s                     pop s[0] s[0]=a+value
17      sub                                   pop s[0],s[-1] s[0]=a-b
18      subq      value.s                     pop s[0] s[0]=a-value
19      mul                                   pop s[0],s[-1] s[0]=a*b
1A      div                                   pop s[0],s[-1] s[0]=a/b
1B      shl       bit                         pop s[0], s[0]=a<<bits
1C      shr       bit                         pop s[0], s[0]=a>>bits
1E      and                                   pop s[0],s[-1] s[0]=a&b
1D      or                                    pop s[0],s[-1] s[0]=a|b
1F      xor                                   pop s[0],s[-1] s[0]=a^b
20      not                                   pop s[0], s[0]=~a
21      neg                                   pop s[0], s[0]=-a
22      gbit      bit                         pop s[0], s[0]=a[bit]
23      sbit      bit                         pop s[0], s[0]=a&1<<bit
24      RESERVED
25      RESERVED
26      lpal      asset|stack                 Load and Use Palette
27      RESERVED
28      RESERVED
29      RESERVED
2A      RESERVED
2B      RESERVED
2C      RESERVED
2D      RESERVED
2E      RESERVED
2F      RESERVED
30      RESERVED
31      RESERVED
32      RESERVED
33      RESERVED
34      RESERVED
35      RESERVED
36      RESERVED
37      RESERVED
38      RESERVED
39      RESERVED
3A      RESERVED
3B      RESERVED
3C      RESERVED
3D      RESERVED
3E      RESERVED
3F      sys      argument                     Expanded Call

* asset|stack refers to when the value is 0 it should pop s[0] and use that
  as the asset ID, otherwise use the 10-bit value.
