Opcodes
# Opcodes
## add

Pop last two values from stack and add them together. Result is in vars

Id
  0
Code
  LONG l, r;
  r = Vm_Pop();
  l = Vm_Pop();
  Vm_SetVar(#V, l + r);
Arg '#V'
  Name
    Var
  Type
    10-bit
  Encoding
    Bits 6-15
Arg '#L'
  Name
    LHS
  Type
    Value at Stack[0]
Arg '#R'
  Name
    RHS
  Type
    Value at Stack[-1]

## adds

Pop last two values from stack and add them together. Result is in stack

Id
  1
Code
  LONG l, r;
  r = Vm_Pop();
  l = Vm_Pop();
  Vm_Push(l + r);
Arg '#L'
  Name
    LHS
  Type
    Value at Stack[0]
Arg '#R'
  Name
    RHS
  Type
    Value at Stack[-1]

## beq

Branch to address if equals

Id
  2
Code
  if ((Vm_LastCmp & VM_CMP_EQUALS) == VM_CMP_EQUALS)
  {
    return #A;
  }
Arg '#A'
  Name
    Address
  Type
    10-bit signed
  Encoding
    Bits 6-15

## bge

Branch to address if greater than or equals

Id
  3
Code
  if ((Vm_LastCmp & (VM_CMP_GT | VM_CMP_EQUALS)) != 0)
  {
    return #A;
  }
Arg '#A'
  Name
    Address
  Type
    10-bit signed
  Encoding
    Bits 6-15

## bgt

Branch to address if greater than

Id
  4
Code
  if ((Vm_LastCmp & VM_CMP_GT) == VM_CMP_GT)
  {
    return #A;
  }
Arg '#A'
  Name
    Address
  Type
    10-bit signed
  Encoding
    Bits 6-15

## ble

Branch to address if less than or equals

Id
  5
Code
  if ((Vm_LastCmp & (VM_CMP_LT | VM_CMP_EQUALS)) != 0)
  {
    return #A;
  }
Arg '#A'
  Name
    Address
  Type
    10-bit signed
  Encoding
    Bits 6-15

## blt

Branch to address if less than

Id
  6
Code
  if ((Vm_LastCmp & VM_CMP_LT) == VM_CMP_LT)
  {
    return #A;
  }
Arg '#A'
  Name
    Address
  Type
    10-bit signed
  Encoding
    Bits 6-15

## bne

Branch to address not equals

Id
  7
Code
  if ((Vm_LastCmp & VM_CMP_EQUALS) == 0)
  {
    return #A;
  }
Arg '#A'
  Name
    Address
  Type
    10-bit signed
  Encoding
    Bits 6-15

## bra

Branch to address always

Id
  8
Code
  return #A;
Arg '#A'
  Name
    Address
  Type
    10-bit signed
  Encoding
    Bits 6-15

## cmp

Compare variable to last item on stack

Id
  9
Code
  LONG l, r;
  r = Vm_Pop();
  l = Vm_GetVar(#L);
  Vm_Compare(l, r);
Arg '#L'
  Name
    LHS
  Type
    10-bit
  Encoding
    Bits 6-15
Arg '#R'
  Name
    RHS
  Type
    Value at Stack[0]

## cmpi

Compare variable to last item to an immediate on stack

Id
  10
Code
  LONG l, r;
  r = Vm_Pop();
  l = #L;
  Vm_Compare(l, r);
Arg '#L'
  Name
    LHS
  Type
    10-bit
  Encoding
    Bits 6-15
Arg '#R'
  Name
    RHS
  Type
    Value at Stack[0]

## cmps

Compare two stack values together

Id
  11
Code
  LONG l, r;
  r = Vm_Pop();
  l = Vm_Pop();
  Vm_Compare(l, r);
Arg '#L'
  Name
    LHS
  Type
    Value at Stack[0]
Arg '#R'
  Name
    RHS
  Type
    Value at Stack[-1]

## dec

Decrease variable by 1

Id
  12
Code
  Vm_DecVar(#V);
Arg '#V'
  Name
    Var
  Type
    10-bit
  Encoding
    Bits 6-15

## dup

Duplicate the stack value

Id
  13
Code
  Vm_Push(Vm_Peek());

## inc

Increase variable by 1

Id
  14
Code
  Vm_IncVar(#V);
Arg '#V'
  Name
    Var
  Type
    10-bit
  Encoding
    Bits 6-15

## loadi

Load a 10-bit signed value and place it onto the stack

Id
  15
Code
  Vm_Push(#V);
Arg '#V'
  Name
    Value
  Type
    10-bit
  Encoding
    Bits 6-15

## loadk

Load a constant and place it onto the stack

Id
  16
Code
  LONG v;
  v = Vm_GetConstant(#C);
  Vm_Push(v);
Arg '#C'
  Name
    Constant
  Type
    10-bit
  Encoding
    Bits 6-15

## loadpal

Load a palette

Id
  17
Code
  Api_LoadPalette(#P);
Arg '#P'
  Name
    PaletteNum
  Type
    10-bit
  Encoding
    Bits 6-15

## loadroom

Load a room

Id
  18
Code
  Api_LoadRoom(#R);
Arg '#R'
  Name
    RoomNum
  Type
    10-bit
  Encoding
    Bits 6-15

## mul

Pop last two values from stack and add them together. Result is in vars

Id
  19
Code
  LONG l, r;
  r = Vm_Pop();
  l = Vm_Pop();
  Vm_SetVar(#V, l * r);
Arg '#V'
  Name
    Var
  Type
    10-bit
  Encoding
    Bits 6-15
Arg '#L'
  Name
    LHS
  Type
    Value at Stack[0]
Arg '#R'
  Name
    RHS
  Type
    Value at Stack[-1]

## pop

Pop stack value and discard

Id
  20
Code
  Vm_Pop();

## pushi

Push 10-bit signed value on the stack

Id
  21
Code
  Vm_Push(#V);
Arg '#V'
  Name
    Variable
  Type
    10-bit
  Encoding
    Bits 6-15

## shl

Pop a value. Left Shift it and push the result on the stack

Id
  22
Code
  LONG l;
  l = Vm_Pop();
  Vm_Push(l << #V);
Arg '#V'
  Name
    Var
  Type
    10-bit
  Encoding
    Bits 6-15
Arg '#L'
  Name
    LHS
  Type
    Value at Stack[0]

## shr

Pop a value. Right Shift it and push the result on the stack

Id
  23
Code
  LONG l;
  l = Vm_Pop();
  Vm_Push(l >> #V);
Arg '#V'
  Name
    Var
  Type
    10-bit
  Encoding
    Bits 6-15
Arg '#L'
  Name
    LHS
  Type
    Value at Stack[0]

## sub

Pop last two values from stack and subtract them together. Result is in vars

Id
  24
Code
  LONG l, r;
  r = Vm_Pop();
  l = Vm_Pop();
  Vm_SetVar(#V, l - r);
Arg '#V'
  Name
    Var
  Type
    10-bit
  Encoding
    Bits 6-15
Arg '#L'
  Name
    LHS
  Type
    Value at Stack[0]
Arg '#R'
  Name
    RHS
  Type
    Value at Stack[-1]

## subs

Pop last two values from stack and subtract them together. Result is in stack.

Id
  25
Code
  LONG l, r;
  r = Vm_Pop();
  l = Vm_Pop();
  Vm_Push(l - r);
Arg '#L'
  Name
    LHS
  Type
    Value at Stack[0]
Arg '#R'
  Name
    RHS
  Type
    Value at Stack[-1]

## sys

Perform a System Call, where the top of the stack is the argument.

Id
  26
Code
  LONG arg;
  arg = Vm_Pop();
  Parrot_SysCall(#F, arg);
Arg '#F'
  Name
    Function
  Type
    10-bit
  Encoding
    Bits 6-15
Arg '#A'
  Name
    Argument
  Type
    Value at Stack[0]

